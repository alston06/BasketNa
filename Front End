<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>BasketNa — Pro Redesign (INR)</title>
  <script>
    // Tailwind brand config
    window.tailwind = {
      theme: {
        extend: {
          colors: {
            primary: '#6366F1', // Indigo
            accent: '#22D3EE',  // Cyan
            plum:   '#A78BFA',  // Violet
          },
          boxShadow: {
            soft: '0 10px 30px -12px rgba(2,8,23,.18)',
            softDark: '0 10px 30px -12px rgba(0,0,0,.55)',
          }
        }
      }
    };
  </script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Smooth focus */
    .focus-ring:focus { outline: none; box-shadow: 0 0 0 3px rgba(99,102,241,.35); }
    /* Hide carousels scrollbars */
    .no-scrollbar::-webkit-scrollbar { display: none; } .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
    /* View transition */
    .view { opacity: 0; transform: translateY(8px); transition: opacity .25s ease, transform .25s ease; display: none; }
    .view.active { display: block; opacity: 1; transform: translateY(0); }
    /* Modal */
    .modal { position: fixed; inset: 0; display: none; }
    .modal.open { display: flex; }
    /* Toggle switch */
    .switch { position: relative; width: 46px; height: 26px; background: #e5e7eb; border-radius: 999px; transition: background .25s ease; }
    .switch.knob-on { background: #6366F1; }
    .switch .knob { position: absolute; top: 3px; left: 3px; width: 20px; height: 20px; background: #fff; border-radius: 999px; transition: left .25s ease; box-shadow: 0 1px 2px rgba(0,0,0,.25); }
    .switch.knob-on .knob { left: 23px; }
    /* Glass cards */
    .glass { background: rgba(255,255,255,0.85); backdrop-filter: blur(10px); }
    .dark .glass { background: rgba(12,17,34,0.72); }
    /* Active tab underline */
    .tab-underline { position: absolute; bottom: 0; height: 3px; width: 25%; background: linear-gradient(90deg,#6366F1,#A78BFA); transition: transform .25s ease; border-radius: 999px 999px 0 0; }
    /* Ribbon */
    .ribbon {
      position: fixed; top: 14px; right: -58px; transform: rotate(35deg); z-index: 50;
      background: linear-gradient(90deg,#6366F1,#A78BFA); color: white; padding: 6px 80px;
      font-weight: 700; letter-spacing: .06em; box-shadow: 0 8px 18px rgba(0,0,0,.25); pointer-events: none; font-size: 12px;
    }
    /* Hero shimmer rings */
    .hero-ring { position: absolute; inset: -40%; background: radial-gradient(closest-side, rgba(255,255,255,.12), transparent 70%); filter: blur(20px); }
    /* Subtle badge wiggle */
    @keyframes floaty { 0%,100%{transform:translateY(0)} 50%{transform:translateY(-1px)} }
    .floaty { animation: floaty 2.6s ease-in-out infinite; }
  </style>
</head>
<body class="h-full bg-gradient-to-br from-slate-50 via-indigo-50/40 to-cyan-50/40 dark:from-[#0A0F1F] dark:via-[#0A0F1F] dark:to-[#0A0F1F] text-slate-800 dark:text-slate-100 transition-colors duration-300">
  <div class="ribbon">DEMO — Plugin‑ready, INR</div>

  <div class="min-h-full flex flex-col max-w-3xl mx-auto relative">
    <!-- Header -->
    <header class="px-5 pt-5 pb-3">
      <div class="glass rounded-2xl border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark px-4 py-3">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-plum text-white flex items-center justify-center shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M7 18c-.55 0-1-.45-1-1v-5H4v5c0 1.66 1.34 3 3 3h10v-2H7zM20 6h-2.42l-1.72-2.59A1.996 1.996 0 0 0 14.42 2H9.58c-.67 0-1.29.33-1.66.88L6.2 6H4c-1.1 0-1.99.9-1.99 2L2 15c0 1.1.89 2 2 2h15c1.11 0 2-.9 2-2V8c0-1.1-.89-2-2-2zM9.12 4h5.76l1 2H8.12l1-2zM19 15H4V8h15v7z"/></svg>
            </div>
            <div>
              <h1 class="font-extrabold text-lg leading-5 tracking-tight">BasketNa</h1>
              <p class="text-[11px] text-slate-500 dark:text-slate-400">Compare • Track • Save</p>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <span id="modeBadge" class="text-[11px] px-2 py-1 rounded-full bg-slate-200/80 text-slate-700 dark:bg-white/10 dark:text-slate-200">Mode: Mock</span>
            <button id="themeToggle" class="focus-ring rounded-xl px-3 py-2 bg-white/70 dark:bg-white/5 border border-white/60 dark:border-white/10 hover:shadow-sm flex items-center gap-2 text-sm" aria-label="Toggle theme">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-500 dark:hidden" viewBox="0 0 24 24" fill="currentColor"><path d="M6.76 4.84l-1.8-1.79L3.17 4.84l1.79 1.79 1.8-1.79zM1 13h3v-2H1v2zm10 10h2v-3h-2v3zM4.22 19.78l1.79 1.79 1.8-1.79-1.8-1.8-1.79 1.8zM20 13h3v-2h-3v2zM17.24 4.84l1.79-1.79-1.41-1.41-1.8 1.79 1.42 1.41zM12 7a5 5 0 100 10 5 5 0 000-10zm6.78 12.78l1.79 1.79 1.41-1.41-1.79-1.79-1.41 1.41zM11 1h2v3h-2V1z"/></svg>
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-blue-300 hidden dark:block" viewBox="0 0 24 24" fill="currentColor"><path d="M12.3 2.1c-5.5.4-9.8 5.2-9.3 10.8.5 5.5 5.2 9.7 10.8 9.3 4.1-.3 7.6-2.9 9-6.5.2-.5-.4-1-.9-.7-1.1.6-2.4 1-3.8 1-4.4 0-8-3.6-8-8 0-1.4.3-2.7.9-3.8.3-.5-.2-1.1-.7-1.1z"/></svg>
              <span class="hidden sm:inline">Theme</span>
            </button>
            <button id="pluginsToggle" class="focus-ring rounded-xl px-3 py-2 bg-white/70 dark:bg-white/5 border border-white/60 dark:border-white/10 hover:shadow-sm text-sm">Plugins</button>
          </div>
        </div>
      </div>
    </header>

    <!-- Plugins Modal -->
    <section id="pluginsModal" class="modal items-end sm:items-center justify-center z-50">
      <div class="absolute inset-0 bg-black/40" id="pluginsBackdrop"></div>
      <div class="w-full sm:max-w-xl rounded-t-2xl sm:rounded-2xl bg-white dark:bg-[#0b1020] text-slate-800 dark:text-slate-100 shadow-2xl overflow-hidden">
        <div class="flex items-center justify-between px-5 py-4 border-b border-slate-200/70 dark:border-white/10">
          <h3 class="font-semibold">Data Plugins</h3>
          <button id="pluginsClose" class="px-2 py-1 rounded hover:bg-slate-100 dark:hover:bg-white/10">✕</button>
        </div>
        <div class="px-5 pt-4 pb-5 space-y-5">
          <div class="rounded-xl p-4 bg-slate-50/70 dark:bg-white/5 border border-slate-200/70 dark:border-white/10">
            <div class="flex items-center justify-between gap-3">
              <div>
                <p class="font-medium">Active Provider</p>
                <p class="text-xs text-slate-500 dark:text-slate-400">Switch Mock (local) or API (your FastAPI)</p>
              </div>
              <select id="providerSelect" class="text-sm rounded-lg bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 px-2 py-1 focus-ring">
                <option value="mock">Mock (Local)</option>
                <option value="api">API (FastAPI)</option>
              </select>
            </div>
          </div>

          <details open class="rounded-xl">
            <summary class="px-4 py-3 cursor-pointer font-medium rounded-t-xl bg-slate-100/70 dark:bg-white/10 border border-slate-200/70 dark:border-white/10">API Connector</summary>
            <div class="p-4 space-y-3 border-x border-b border-slate-200/70 dark:border-white/10 rounded-b-xl">
              <label class="text-sm block">Base URL
                <input id="apiBaseUrl" type="url" placeholder="https://your-api.example.com" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring">
              </label>
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <label class="text-sm">Search<input id="endpointSearch" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring" value="/search"></label>
                <label class="text-sm">Compare<input id="endpointCompare" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring" value="/compare/{product_id}"></label>
                <label class="text-sm">Forecast<input id="endpointForecast" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring" value="/forecast/{product_id}"></label>
                <label class="text-sm">Health<input id="endpointHealth" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring" value="/health"></label>
              </div>
              <div class="flex items-center gap-2">
                <button id="btnSaveApi" class="px-3 py-2 rounded-lg bg-gradient-to-r from-primary to-plum text-white focus-ring">Save</button>
                <button id="btnPing" class="px-3 py-2 rounded-lg bg-slate-100 dark:bg-white/10 focus-ring">Ping</button>
                <span class="text-xs text-slate-500 dark:text-slate-400">Enable CORS on your API</span>
              </div>
              <div class="grid grid-cols-1 sm:grid-cols-[1fr_auto] gap-2 items-end">
                <label class="text-sm">Test query<input id="testQueryInput" placeholder="iphone 14" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring"></label>
                <button id="btnTestSearch" class="px-3 py-2 rounded-lg bg-slate-100 dark:bg-white/10 focus-ring">Run Test</button>
              </div>
              <div id="apiStatus" class="text-sm"></div>
              <pre id="apiPreview" class="mt-1 max-h-40 overflow-auto text-xs p-3 rounded bg-slate-900 text-slate-100 hidden"></pre>
              <div class="text-xs text-slate-500 dark:text-slate-400">
                Shapes:
                <ul class="list-disc ml-4 space-y-1 mt-1">
                  <li>/search?query=... → [{ id|product_id, name, category, description, prices:[{retailer, price|value, url}] }]</li>
                  <li>/compare/{product_id} → { product_id, prices:[{retailer, price, url}] }</li>
                  <li>/forecast/{product_id} → { series:[{date, price}] }</li>
                </ul>
              </div>
            </div>
          </details>

          <details class="rounded-xl">
            <summary class="px-4 py-3 cursor-pointer font-medium rounded-t-xl bg-slate-100/70 dark:bg-white/10 border border-slate-200/70 dark:border-white/10">CSV/JSON Import (INR)</summary>
            <div class="p-4 space-y-3 border-x border-b border-slate-200/70 dark:border-white/10 rounded-b-xl">
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <label class="text-sm">Product name<input id="importName" placeholder="Custom Product" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring"></label>
                <label class="text-sm">Category<input id="importCategory" placeholder="Electronics" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring"></label>
              </div>
              <label class="text-sm block">Price history CSV or JSON
                <textarea id="importSeries" rows="5" placeholder="CSV: YYYY-MM-DD, PRICE  or  JSON: { &quot;series&quot;: [{ &quot;date&quot;: &quot;2025-01-05&quot;, &quot;price&quot;: 58999 }] }" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring"></textarea>
              </label>
              <label class="text-sm block">Retailer prices CSV or JSON
                <textarea id="importRetailers" rows="4" placeholder="CSV: retailer, price, url  or  JSON: { &quot;prices&quot;: [{ &quot;retailer&quot;: &quot;Amazon&quot;, &quot;price&quot;: 53999, &quot;url&quot;: &quot;https://...&quot; }] }" class="mt-1 w-full rounded-lg px-3 py-2 bg-white dark:bg-[#0f1325] border border-slate-200/70 dark:border-white/10 focus-ring"></textarea>
              </label>
              <div class="flex items-center gap-2">
                <button id="btnImportApply" class="px-3 py-2 rounded-lg bg-gradient-to-r from-primary to-plum text-white focus-ring">Create/Update</button>
                <span class="text-xs text-slate-500 dark:text-slate-400">Adds locally and opens in Results</span>
              </div>
              <div id="importStatus" class="text-sm"></div>
            </div>
          </details>
        </div>
      </div>
    </section>

    <!-- Content -->
    <main id="views" class="flex-1 px-5 pb-28 space-y-6">
      <!-- HOME -->
      <section id="view-home" class="view active">
        <div class="relative rounded-3xl overflow-hidden">
          <div class="absolute inset-0 bg-gradient-to-br from-primary via-plum to-primary opacity-95"></div>
          <div class="hero-ring"></div>
          <div class="relative p-6 sm:p-7 text-white">
            <h2 class="text-2xl font-extrabold tracking-tight">Find the best price, every time.</h2>
            <p class="mt-1 text-white/85 text-sm">Search, compare across retailers, track drops, and save smarter — in ₹.</p>
            <form id="homeSearchForm" class="mt-4" autocomplete="off">
              <div class="relative">
                <input id="homeSearch" type="search" placeholder="Search products (e.g., iPhone 14, rice 5kg)..." class="w-full rounded-xl px-4 py-3 pr-12 bg-white/15 text-white placeholder:text-white/70 focus-ring"/>
                <button class="absolute right-2 top-1/2 -translate-y-1/2 rounded-lg bg-white/15 hover:bg-white/25 text-white px-3 py-2 focus-ring" aria-label="Search">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79L20 21.5 21.5 20 15.5 14z"/></svg>
                </button>
              </div>
              <div class="mt-3 flex gap-2 flex-wrap">
                <button type="button" class="suggest-chip rounded-full px-3 py-1.5 bg-white/15 hover:bg-white/25 text-sm">iPhone 14</button>
                <button type="button" class="suggest-chip rounded-full px-3 py-1.5 bg-white/15 hover:bg-white/25 text-sm">Samsung TV 55"</button>
                <button type="button" class="suggest-chip rounded-full px-3 py-1.5 bg-white/15 hover:bg-white/25 text-sm">Rice 5kg</button>
                <button type="button" class="suggest-chip rounded-full px-3 py-1.5 bg-white/15 hover:bg-white/25 text-sm">AirPods Pro</button>
              </div>
            </form>
          </div>
        </div>

        <div class="mt-5">
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-semibold">Recommended for you</h3>
            <div class="flex items-center gap-3">
              <span id="recSourceBadge" class="text-xs px-2 py-1 rounded-full bg-slate-200 text-slate-700 dark:bg-white/10 dark:text-slate-200">Source: Mock</span>
              <button id="refreshRecs" class="text-primary hover:underline text-sm">Refresh</button>
            </div>
          </div>
          <div id="recsCarousel" class="flex gap-4 overflow-x-auto no-scrollbar pb-1"></div>
        </div>

        <div class="grid grid-cols-2 gap-3 sm:grid-cols-3 mt-4">
          <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
            <div class="w-10 h-10 rounded-lg bg-primary/10 text-primary flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor"><path d="M4 6h18v2H4V6zm0 10h18v2H4v-2zM4 11h18v2H4v-2zM1 6h2v2H1V6zm0 5h2v2H1v-2zm0 5h2v2H1v-2z"/></svg>
            </div>
            <h4 class="font-semibold mt-3">Compare</h4>
            <p class="text-sm text-slate-600 dark:text-slate-400">See Amazon, Flipkart, BigBasket, DMart & more.</p>
          </div>
          <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
            <div class="w-10 h-10 rounded-lg bg-accent/10 text-accent flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c2.04 0 3.81 1.22 4.5 3.01C12.69 4.22 14.46 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/></svg>
            </div>
            <h4 class="font-semibold mt-3">Track</h4>
            <p class="text-sm text-slate-600 dark:text-slate-400">Get alerts when prices drop.</p>
          </div>
          <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark col-span-2 sm:col-span-1">
            <div class="w-10 h-10 rounded-lg bg-plum/10 text-plum flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor"><path d="M7 14l5-5 5 5z"/></svg>
            </div>
            <h4 class="font-semibold mt-3">Smart Recs</h4>
            <p class="text-sm text-slate-600 dark:text-slate-400">Buy at the right time with trends.</p>
          </div>
        </div>
      </section>

      <!-- SEARCH -->
      <section id="view-search" class="view">
        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <form id="searchForm" class="flex items-center gap-2" autocomplete="off">
            <div class="flex-1 relative">
              <input id="searchInput" type="search" placeholder="Search for products..." class="w-full rounded-xl px-4 py-3 pr-10 bg-white/80 dark:bg-white/5 border border-white/70 dark:border-white/10 focus-ring text-slate-800 dark:text-slate-100 placeholder:text-slate-400 dark:placeholder:text-slate-500"/>
              <div class="absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 dark:text-slate-500">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="currentColor"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79L20 21.5 21.5 20 15.5 14z"/></svg>
              </div>
            </div>
            <div class="text-xs flex items-center gap-1">
              Provider:
              <button id="quickMock" type="button" class="px-2 py-2 rounded-xl bg-white/80 dark:bg-white/5 border border-white/70 dark:border-white/10">Mock</button>
              <button id="quickAPI" type="button" class="px-2 py-2 rounded-xl bg-white/80 dark:bg-white/5 border border-white/70 dark:border-white/10">API</button>
            </div>
            <button class="px-4 py-3 rounded-xl bg-gradient-to-r from-primary to-plum text-white focus-ring">Search</button>
          </form>
          <div class="mt-2 flex items-center justify-between">
            <div id="searchSourceNote" class="text-xs text-slate-600 dark:text-slate-400">Using Mock provider</div>
          </div>
          <div id="liveSuggestions" class="mt-2 hidden"><div class="flex gap-2 flex-wrap text-sm"></div></div>
        </div>

        <div id="searchLoading" class="mt-4 hidden">
          <div class="flex items-center gap-3 text-slate-600 dark:text-slate-300">
            <span class="w-5 h-5 border-2 border-primary border-t-transparent rounded-full animate-spin"></span>
            Searching retailers...
          </div>
        </div>
        <div id="searchError" class="mt-4 hidden">
          <div class="rounded-2xl p-3 bg-red-50 dark:bg-red-500/10 text-red-700 dark:text-red-300 border border-red-200/60 dark:border-red-500/30">
            Something went wrong. Please check API and try again.
          </div>
        </div>
        <div id="searchEmpty" class="mt-6 hidden">
          <div class="rounded-2xl p-6 text-center glass border border-white/60 dark:border-white/10">
            <p class="font-semibold">No results found</p>
            <p class="text-sm text-slate-600 dark:text-slate-400">Try a different keyword or check spelling.</p>
          </div>
        </div>
        <div id="searchResults" class="mt-4 space-y-4"></div>
      </section>

      <!-- RESULTS -->
      <section id="view-results" class="view">
        <div id="productHeader" class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark"></div>

        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <div class="flex items-center justify-between">
            <h3 class="font-semibold">Retailer Comparison</h3>
            <div class="flex items-center gap-2">
              <span id="bestPricePill" class="text-xs bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300 px-2 py-1 rounded-full floaty">Best price highlighted</span>
              <button id="btnOpenImport" class="text-xs px-2 py-1 rounded bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10">Import</button>
            </div>
          </div>
          <div id="retailerTable" class="mt-3 space-y-2"></div>
        </div>

        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <div class="flex items-center justify-between">
            <h3 class="font-semibold">Price Trend</h3>
            <div class="flex items-center gap-2">
              <button data-range="90" class="chart-range px-3 py-1.5 rounded-lg bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10">3M</button>
              <button data-range="180" class="chart-range px-3 py-1.5 rounded-lg">6M</button>
              <button data-range="365" class="chart-range px-3 py-1.5 rounded-lg">12M</button>
              <button data-range="730" class="chart-range px-3 py-1.5 rounded-lg">24M</button>
            </div>
          </div>
          <div class="mt-3">
            <svg id="trendChart" viewBox="0 0 600 220" class="w-full h-48 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10"></svg>
          </div>
        </div>
      </section>

      <!-- DASHBOARD -->
      <section id="view-dashboard" class="view">
        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <div class="flex items-center justify-between">
            <h3 class="font-semibold">Tracked Products</h3>
            <button id="clearTracked" class="text-sm text-red-600 dark:text-red-400 hover:underline">Clear all</button>
          </div>
          <div id="trackedList" class="mt-3 space-y-3"></div>
          <div id="trackedEmpty" class="mt-3 text-sm text-slate-600 dark:text-slate-400 hidden">You have no tracked products yet. Visit a result and tap “Track”.</div>
        </div>

        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <div class="flex items-center justify-between">
            <h3 class="font-semibold">Price Alerts</h3>
            <div class="flex items-center gap-2">
              <span class="text-sm">Enable</span>
              <button id="notifToggle" class="switch" aria-label="Toggle notifications"><span class="knob"></span></button>
            </div>
          </div>
          <div id="alertsList" class="mt-3 space-y-2"></div>
          <div id="alertsEmpty" class="mt-3 text-sm text-slate-600 dark:text-slate-400 hidden">No alerts yet. We’ll list price drops here.</div>
        </div>

        <div class="rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark">
          <div class="flex items-center justify-between">
            <h3 class="font-semibold">Analytics</h3>
            <div class="flex items-center gap-2">
              <label class="text-sm">Currency</label>
              <select id="currencySelect" class="text-sm rounded-lg bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 px-2 py-1 focus-ring">
                <option value="INR">₹ INR</option>
              </select>
            </div>
          </div>
          <div class="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3">
            <div class="rounded-xl p-3 bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10">
              <p class="text-sm text-slate-600 dark:text-slate-400 mb-1">Best Deal Detection</p>
              <svg id="bestDealChart" viewBox="0 0 300 120" class="w-full h-28"></svg>
            </div>
            <div class="rounded-xl p-3 bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10">
              <p class="text-sm text-slate-600 dark:text-slate-400 mb-1">Retailer Comparison</p>
              <svg id="multiStoreChart" viewBox="0 0 300 120" class="w-full h-28"></svg>
            </div>
          </div>
        </div>
      </section>
    </main>

    <!-- Bottom Tabs -->
    <nav class="fixed bottom-3 left-1/2 -translate-x-1/2 w-[calc(100%-1.5rem)] max-w-3xl glass border border-white/60 dark:border-white/10 rounded-2xl shadow-soft dark:shadow-softDark backdrop-blur px-2">
      <div class="relative grid grid-cols-4">
        <div id="tabUnderline" class="tab-underline"></div>
        <button data-view="home" class="tab-btn py-3 flex flex-col items-center gap-1 text-[12px] text-slate-600 dark:text-slate-300">
          <svg class="w-5 h-5"><path fill="currentColor" d="M12 3l9 8h-3v9h-5v-6H11v6H6v-9H3l9-8z"/></svg>
          <span>Home</span>
        </button>
        <button data-view="search" class="tab-btn py-3 flex flex-col items-center gap-1 text-[12px] text-slate-600 dark:text-slate-300">
          <svg class="w-5 h-5"><path fill="currentColor" d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79L20 21.5 21.5 20 15.5 14z"/></svg>
          <span>Search</span>
        </button>
        <button data-view="dashboard" class="tab-btn py-3 flex flex-col items-center gap-1 text-[12px] text-slate-600 dark:text-slate-300">
          <svg class="w-5 h-5" viewBox="0 0 24 24"><path fill="currentColor" d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/></svg>
          <span>Dashboard</span>
        </button>
        <button data-view="results" class="tab-btn py-3 flex flex-col items-center gap-1 text-[12px] text-slate-600 dark:text-slate-300">
          <svg class="w-5 h-5" viewBox="0 0 24 24"><path fill="currentColor" d="M3 5h18v2H3zM3 9h18v10H3z"/><path fill="currentColor" d="M7 12h5v5H7z"/></svg>
          <span>Results</span>
        </button>
      </div>
    </nav>
  </div>

  <!-- Toast -->
  <div id="toast" class="fixed bottom-24 left-1/2 -translate-x-1/2 px-4 py-2 rounded-xl glass border border-white/60 dark:border-white/10 text-sm shadow-lg hidden">Saved</div>

  <script>
    // THEME
    const root = document.documentElement;
    const themeToggle = document.getElementById('themeToggle');
    const storedTheme = localStorage.getItem('basketna_theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    if (storedTheme === 'dark') root.classList.add('dark'); else root.classList.remove('dark');
    themeToggle.addEventListener('click', () => {
      root.classList.toggle('dark');
      localStorage.setItem('basketna_theme', root.classList.contains('dark') ? 'dark' : 'light');
      renderTrend(lastRenderedSeries || []); // refresh chart contrast
    });

    // UTIL
    function showToast(msg='Saved') {
      const t = document.getElementById('toast');
      t.textContent = msg; t.classList.remove('hidden'); t.style.opacity = '1';
      setTimeout(()=>{ t.style.opacity='0'; setTimeout(()=>t.classList.add('hidden'), 220); }, 1400);
    }
    function shuffle(arr){ return [...arr].sort(()=>Math.random()-0.5); }
    function sortByPrice(prices){ return [...prices].sort((a,b)=>a.value-b.value); }
    function fmtCurrency(value){ return `₹${Math.round(value).toLocaleString('en-IN')}`; }
    function svgProduct(size=32) {
      return `
        <svg xmlns="http://www.w3.org/2000/svg" class="w-${Math.round(size/4)} h-${Math.round(size/4)}" viewBox="0 0 24 24" fill="currentColor">
          <rect x="4" y="4" width="16" height="12" rx="2" class="text-slate-400" fill="currentColor"/>
          <rect x="6" y="6" width="12" height="8" rx="1" class="text-slate-300" fill="currentColor" opacity=".6"/>
          <rect x="2" y="18" width="20" height="2" rx="1" class="text-slate-400" fill="currentColor"/>
        </svg>
      `;
    }

    // STATE
    const currencyState = { code: 'INR' };
    localStorage.setItem('basketna_currency','INR');
    const tracked = JSON.parse(localStorage.getItem('basketna_tracked') || '[]');
    const notifEnabledLS = JSON.parse(localStorage.getItem('basketna_notif') || 'false');
    const appState = { currentView: 'home', currentQuery: '', selectedProductId: null, chartRangeDays: 90 };

    // PROVIDER CONFIG
    const defaultApiCfg = {
      baseUrl: '',
      endpoints: { search:'/search', compare:'/compare/{product_id}', forecast:'/forecast/{product_id}', recommendations:'/recommendations', health:'/health' },
      timeoutMs: 8000
    };
    const apiCfg = JSON.parse(localStorage.getItem('basketna_api_config') || JSON.stringify(defaultApiCfg));
    let activeProvider = localStorage.getItem('basketna_provider') || 'mock';
    const modeBadge = document.getElementById('modeBadge');
    const recSourceBadge = document.getElementById('recSourceBadge');
    function updateModeBadges() {
      const label = activeProvider === 'api' ? 'API' : 'Mock';
      modeBadge.textContent = `Mode: ${label}`;
      recSourceBadge.textContent = `Source: ${label}`;
      document.getElementById('searchSourceNote').textContent = `Using ${label} provider`;
    }

    // RETAILERS META
    const retailers = [
      { id: 'amazon', name: 'Amazon', color: '#ff9900', urlBase: 'https://www.amazon.in/s?k=' },
      { id: 'flipkart', name: 'Flipkart', color: '#2874F0', urlBase: 'https://www.flipkart.com/search?q=' },
      { id: 'bigbasket', name: 'BigBasket', color: '#84C341', urlBase: 'https://www.bigbasket.com/ps/?q=' },
      { id: 'dmart', name: 'DMart', color: '#0B8F70', urlBase: 'https://www.dmart.in/search?search=' },
      { id: 'gshop', name: 'Google Shopping', color: '#34A853', urlBase: 'https://www.google.com/search?tbm=shop&q=' }
    ];

    // MOCK DATA
    function makeSeries(min, max, days) {
      const arr = []; let v = (min+max)/2;
      for (let i=days-1; i>=0; i--) {
        const season = 1 + 0.05*Math.sin(i/18);
        v += (Math.random()-0.5)*(max-min)*0.01;
        v = Math.max(min, Math.min(max, v));
        arr.push({ t: Date.now() - i*86400000, v: v*season });
      }
      return arr;
    }
    const PRODUCTS = [
      {
        id: 'p_iphone14',
        name: 'Apple iPhone 14 (128GB)',
        category: 'Electronics',
        description: 'A15 Bionic, advanced dual‑camera, long battery life.',
        series: makeSeries(55000, 80000, 365),
        prices: [
          { retailer: 'Amazon', value: 67999, url: retailers[0].urlBase + 'iphone+14+128gb' },
          { retailer: 'Flipkart', value: 66999, url: retailers[1].urlBase + 'iphone+14+128gb' },
          { retailer: 'Google Shopping', value: 68500, url: retailers[4].urlBase + 'iphone+14+128gb' }
        ]
      },
      {
        id: 'p_sam_tv_55',
        name: 'Samsung 55" 4K UHD Smart TV',
        category: 'Electronics',
        description: 'Crystal UHD, HDR, built-in streaming apps, voice control.',
        series: makeSeries(30000, 52000, 365),
        prices: [
          { retailer: 'Amazon', value: 42999, url: retailers[0].urlBase + 'samsung+55+4k+uhd+smart+tv' },
          { retailer: 'Flipkart', value: 41999, url: retailers[1].urlBase + 'samsung+55+tv' },
          { retailer: 'Google Shopping', value: 44500, url: retailers[4].urlBase + 'samsung+55+uhd+tv' }
        ]
      },
      {
        id: 'p_basmati_5kg',
        name: 'Basmati Rice 5kg',
        category: 'Groceries',
        description: 'Premium long grain Basmati rice for daily cooking.',
        series: makeSeries(450, 800, 365),
        prices: [
          { retailer: 'BigBasket', value: 599, url: retailers[2].urlBase + 'basmati+rice+5kg' },
          { retailer: 'DMart', value: 579, url: retailers[3].urlBase + 'basmati+rice+5kg' },
          { retailer: 'Amazon', value: 620, url: retailers[0].urlBase + 'basmati+rice+5kg' }
        ]
      },
      {
        id: 'p_airpods_pro',
        name: 'Apple AirPods Pro (2nd Gen)',
        category: 'Electronics',
        description: 'ANC, Transparency mode, MagSafe charging.',
        series: makeSeries(16000, 26000, 365),
        prices: [
          { retailer: 'Amazon', value: 19990, url: retailers[0].urlBase + 'airpods+pro+2' },
          { retailer: 'Flipkart', value: 19490, url: retailers[1].urlBase + 'airpods+pro+2' },
          { retailer: 'Google Shopping', value: 20500, url: retailers[4].urlBase + 'airpods+pro+2' }
        ]
      }
    ];

    // PROVIDERS
    const lastApiCache = { searchIndex: {}, rawPreview: null };
    function buildUrl(base, path) {
      if (!base) return path;
      const join = (a,b)=> a.replace(/\/+$/,'') + '/' + b.replace(/^\/+/,'');
      return join(base, path);
    }
    function withTimeout(promise, ms) {
      let t; const timeout = new Promise((_,rej)=>t=setTimeout(()=>rej(new Error('Timeout')), ms));
      return Promise.race([promise.finally(()=>clearTimeout(t)), timeout]);
    }
    async function fetchJson(url, opts={}) {
      const res = await withTimeout(fetch(url, { ...opts }), apiCfg.timeoutMs);
      const text = await res.text(); let json = null; try { json = text ? JSON.parse(text) : null; } catch(e){}
      return { ok: res.ok, status: res.status, json, text };
    }
    function normalizePrices(arr=[]) {
      return arr.map(p=>({ retailer: p.retailer || p.store || p.seller || 'Retailer', value: Number(p.value ?? p.price ?? p.amount ?? 0), url: p.url || p.link || '#' }))
               .filter(p=>Number.isFinite(p.value) && p.value>0);
    }
    function normalizeSearch(data) {
      const list = Array.isArray(data) ? data : (data?.items || data?.results || data?.products || []);
      return list.map((it, idx)=>({
        id: it.product_id || it.id || it.sku || it.uuid || `api_${idx}`,
        name: it.name || it.title || 'Unnamed product',
        category: it.category || it.cat || '',
        description: it.description || it.desc || '',
        prices: normalizePrices(it.prices || it.retailers || [])
      }));
    }
    function normalizeForecast(data) {
      const s = data?.series || data?.history || [];
      return s.map(x=>({ t: new Date(x.t || x.date).getTime(), v: Number(x.v ?? x.price ?? x.value)||0 })).filter(x=>x.t && x.v);
    }
    const Providers = {
      mock: {
        async recommendations(){ return shuffle(PRODUCTS).slice(0,4); },
        async search(q){ return PRODUCTS.filter(p=>p.name.toLowerCase().includes(q.toLowerCase()) || p.category.toLowerCase().includes(q.toLowerCase())); },
        async compare(id){ const p = PRODUCTS.find(x=>x.id===id); return p ? p.prices : []; },
        async forecast(id){ const p = PRODUCTS.find(x=>x.id===id); return p ? p.series : []; }
      },
      api: {
        async recommendations(){
          if (!apiCfg.baseUrl) return [];
          const { json } = await fetchJson(buildUrl(apiCfg.baseUrl, apiCfg.endpoints.recommendations));
          return normalizeSearch(json).slice(0,4);
        },
        async search(q){
          const url = new URL(buildUrl(apiCfg.baseUrl, apiCfg.endpoints.search));
          url.searchParams.set('query', q);
          const { ok, json, status } = await fetchJson(url.toString());
          lastApiCache.rawPreview = json;
          if (!ok) throw new Error(`Search failed (${status})`);
          const norm = normalizeSearch(json);
          norm.forEach(item => lastApiCache.searchIndex[item.id] = item);
          return norm;
        },
        async compare(id){
          const path = apiCfg.endpoints.compare.replace('{product_id}', encodeURIComponent(id));
          const { ok, json } = await fetchJson(buildUrl(apiCfg.baseUrl, path));
          if (!ok) throw new Error('Compare failed');
          const prices = normalizePrices(json?.prices || json);
          if (prices.length) return prices;
          const cached = lastApiCache.searchIndex[id];
          return normalizePrices(cached?.prices || []);
        },
        async forecast(id){
          const path = apiCfg.endpoints.forecast.replace('{product_id}', encodeURIComponent(id));
          const { ok, json } = await fetchJson(buildUrl(apiCfg.baseUrl, path));
          if (!ok) throw new Error('Forecast failed');
          return normalizeForecast(json);
        }
      }
    };

    // NAV
    const views = {
      home: document.getElementById('view-home'),
      search: document.getElementById('view-search'),
      dashboard: document.getElementById('view-dashboard'),
      results: document.getElementById('view-results')
    };
    const tabButtons = Array.from(document.querySelectorAll('.tab-btn'));
    const tabUnderline = document.getElementById('tabUnderline');
    function setView(name) {
      appState.currentView = name;
      Object.entries(views).forEach(([k, el]) => el.classList.toggle('active', k===name));
      const idx = ['home','search','dashboard','results'].indexOf(name);
      tabUnderline.style.transform = `translateX(${idx*100}%)`;
      tabButtons.forEach(btn => {
        const on = btn.dataset.view === name;
        btn.classList.toggle('text-primary', on);
        btn.classList.toggle('font-semibold', on);
      });
      if (name === 'dashboard') renderDashboard();
      if (name === 'results' && appState.selectedProductId) renderResults(appState.selectedProductId);
    }
    tabButtons.forEach(b => b.addEventListener('click', () => setView(b.dataset.view)));

    // PLUGINS
    const pluginsModal = document.getElementById('pluginsModal');
    const pluginsToggle = document.getElementById('pluginsToggle');
    const pluginsClose = document.getElementById('pluginsClose');
    const pluginsBackdrop = document.getElementById('pluginsBackdrop');
    const providerSelect = document.getElementById('providerSelect');
    const apiBaseUrl = document.getElementById('apiBaseUrl');
    const endpointSearch = document.getElementById('endpointSearch');
    const endpointCompare = document.getElementById('endpointCompare');
    const endpointForecast = document.getElementById('endpointForecast');
    const endpointHealth = document.getElementById('endpointHealth');
    const btnSaveApi = document.getElementById('btnSaveApi');
    const btnPing = document.getElementById('btnPing');
    const testQueryInput = document.getElementById('testQueryInput');
    const btnTestSearch = document.getElementById('btnTestSearch');
    const apiStatus = document.getElementById('apiStatus');
    const apiPreview = document.getElementById('apiPreview');

    function openPlugins() {
      providerSelect.value = activeProvider;
      apiBaseUrl.value = apiCfg.baseUrl || '';
      endpointSearch.value = apiCfg.endpoints.search || '/search';
      endpointCompare.value = apiCfg.endpoints.compare || '/compare/{product_id}';
      endpointForecast.value = apiCfg.endpoints.forecast || '/forecast/{product_id}';
      endpointHealth.value = apiCfg.endpoints.health || '/health';
      apiStatus.textContent = '';
      apiPreview.classList.add('hidden'); apiPreview.textContent = '';
      pluginsModal.classList.add('open');
    }
    function closePlugins(){ pluginsModal.classList.remove('open'); }
    pluginsToggle.addEventListener('click', openPlugins);
    pluginsClose.addEventListener('click', closePlugins);
    pluginsBackdrop.addEventListener('click', closePlugins);
    providerSelect.addEventListener('change', () => {
      activeProvider = providerSelect.value;
      localStorage.setItem('basketna_provider', activeProvider);
      updateModeBadges();
      showToast(`Provider: ${activeProvider.toUpperCase()}`);
    });
    btnSaveApi.addEventListener('click', () => {
      apiCfg.baseUrl = apiBaseUrl.value.trim();
      apiCfg.endpoints.search = endpointSearch.value.trim() || '/search';
      apiCfg.endpoints.compare = endpointCompare.value.trim() || '/compare/{product_id}';
      apiCfg.endpoints.forecast = endpointForecast.value.trim() || '/forecast/{product_id}';
      apiCfg.endpoints.health = endpointHealth.value.trim() || '/health';
      localStorage.setItem('basketna_api_config', JSON.stringify(apiCfg));
      apiStatus.className = 'text-sm text-green-600 dark:text-green-400';
      apiStatus.textContent = 'Saved.';
      updateModeBadges();
      showToast('API settings saved');
    });
    btnPing.addEventListener('click', async () => {
      apiStatus.className = 'text-sm';
      apiStatus.textContent = 'Pinging...';
      try {
        const url = buildUrl(apiCfg.baseUrl, apiCfg.endpoints.health || '/health');
        const res = await fetch(url, { method: 'GET' });
        apiStatus.className = res.ok ? 'text-sm text-green-600 dark:text-green-400' : 'text-sm text-red-600 dark:text-red-400';
        apiStatus.textContent = res.ok ? `OK ${res.status}` : `Error ${res.status}`;
      } catch {
        apiStatus.className = 'text-sm text-red-600 dark:text-red-400';
        apiStatus.textContent = 'Ping failed. Check URL/CORS.';
      }
    });
    btnTestSearch.addEventListener('click', async () => {
      const q = (testQueryInput.value || 'iphone').trim();
      apiStatus.className = 'text-sm'; apiStatus.textContent = `Testing /search with "${q}"...`;
      try {
        const url = new URL(buildUrl(apiCfg.baseUrl, apiCfg.endpoints.search));
        url.searchParams.set('query', q);
        const { ok, status, json, text } = await fetchJson(url.toString());
        apiStatus.className = ok ? 'text-sm text-green-600 dark:text-green-400' : 'text-sm text-red-600 dark:text-red-400';
        apiStatus.textContent = ok ? `Search OK ${status}` : `Search failed ${status}`;
        apiPreview.classList.remove('hidden');
        apiPreview.textContent = JSON.stringify(json || text || {}, null, 2);
      } catch {
        apiStatus.className = 'text-sm text-red-600 dark:text-red-400';
        apiStatus.textContent = 'Test failed.';
      }
    });

    // IMPORT FROM MODAL
    const importName = document.getElementById('importName');
    const importCategory = document.getElementById('importCategory');
    const importSeries = document.getElementById('importSeries');
    const importRetailers = document.getElementById('importRetailers');
    const btnImportApply = document.getElementById('btnImportApply');
    const importStatus = document.getElementById('importStatus');
    const btnOpenImport = document.getElementById('btnOpenImport');
    btnOpenImport?.addEventListener('click', () => { pluginsToggle.click(); });

    function parseSeries(input) {
      if (!input) return [];
      const t = input.trim();
      try {
        const js = JSON.parse(t);
        const arr = js.series || js.history || js;
        return arr.map(x=>({ t: new Date(x.date || x.t).getTime(), v: Number(x.price ?? x.value ?? x.v) })).filter(x=>x.t && x.v);
      } catch {
        return t.split('\n').map(l=>l.trim()).filter(Boolean).map(l=>{
          const [d,p] = l.split(/[,\s]+/); return { t: new Date(d).getTime(), v: Number(p) };
        }).filter(x=>x.t && x.v);
      }
    }
    function parseRetailers(input) {
      if (!input) return [];
      const t = input.trim();
      try {
        const js = JSON.parse(t);
        const arr = js.prices || js.retailers || js;
        return normalizePrices(arr);
      } catch {
        return t.split('\n').map(l=>l.trim()).filter(Boolean).map(l=>{
          const parts = l.split(',');
          return { retailer: (parts[0]||'Retailer').trim(), value: Number(parts[1]||0), url: (parts[2]||'#').trim() };
        }).filter(x=>x.value>0);
      }
    }
    btnImportApply.addEventListener('click', () => {
      const name = (importName.value || 'Custom Product').trim();
      const category = (importCategory.value || 'General').trim();
      const series = parseSeries(importSeries.value);
      const prices = parseRetailers(importRetailers.value);
      if (!series.length || !prices.length) {
        importStatus.className = 'text-sm text-red-600 dark:text-red-400';
        importStatus.textContent = 'Please provide both series and retailer prices.';
        return;
      }
      const id = 'custom_' + Math.random().toString(36).slice(2,8);
      const p = { id, name, category, description: 'Imported data', series, prices };
      PRODUCTS.unshift(p);
      appState.selectedProductId = id;
      setView('results'); renderResults(id);
      importStatus.className = 'text-sm text-green-600 dark:text-green-400';
      importStatus.textContent = 'Imported and set in Results.';
      showToast('Imported');
    });

    // HOME
    const recsCarousel = document.getElementById('recsCarousel');
    async function renderRecs() {
      recsCarousel.innerHTML = '';
      let items = [];
      try { items = activeProvider==='api' && apiCfg.baseUrl ? await Providers.api.recommendations() : await Providers.mock.recommendations(); } catch {}
      if (!items.length) items = shuffle(PRODUCTS).slice(0,4);
      items.forEach(p => {
        const best = sortByPrice(p.prices || [])[0];
        const card = document.createElement('button');
        card.className = 'min-w-[230px] rounded-2xl text-left glass border border-white/60 dark:border-white/10 overflow-hidden shadow-soft dark:shadow-softDark';
        card.innerHTML = `
          <div class="h-28 bg-gradient-to-br from-primary/10 via-accent/10 to-plum/10 flex items-center justify-center">${svgProduct()}</div>
          <div class="p-3">
            <p class="font-semibold line-clamp-2">${p.name}</p>
            <p class="text-sm text-slate-600 dark:text-slate-400 mt-1">${p.category || ''}</p>
            <div class="mt-2 flex items-center justify-between">
              <span class="text-primary font-semibold">${best?fmtCurrency(best.value):'—'}</span>
              ${best?'<span class="text-[11px] bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300 px-2 py-1 rounded-full floaty">Best</span>':''}
            </div>
          </div>`;
        card.addEventListener('click', () => {
          appState.selectedProductId = p.id || p.product_id || 'api_item';
          if (activeProvider==='api' && p.id) lastApiCache.searchIndex[p.id] = p;
          setView('results'); renderResults(appState.selectedProductId, p);
        });
        recsCarousel.appendChild(card);
      });
    }
    document.getElementById('refreshRecs').addEventListener('click', renderRecs);
    document.getElementById('homeSearchForm').addEventListener('submit', e => {
      e.preventDefault();
      const q = document.getElementById('homeSearch').value.trim();
      if (!q) return;
      goSearch(q);
    });
    Array.from(document.querySelectorAll('.suggest-chip')).forEach(ch => ch.addEventListener('click', ()=>goSearch(ch.textContent.trim())));

    // SEARCH
    const searchForm = document.getElementById('searchForm');
    const searchInput = document.getElementById('searchInput');
    const searchLoading = document.getElementById('searchLoading');
    const searchError = document.getElementById('searchError');
    const searchEmpty = document.getElementById('searchEmpty');
    const searchResults = document.getElementById('searchResults');
    const liveSuggestions = document.getElementById('liveSuggestions');
    document.getElementById('quickMock').addEventListener('click', ()=>{ activeProvider='mock'; localStorage.setItem('basketna_provider','mock'); updateModeBadges(); showToast('Provider: MOCK');});
    document.getElementById('quickAPI').addEventListener('click', ()=>{ activeProvider='api'; localStorage.setItem('basketna_provider','api'); updateModeBadges(); showToast('Provider: API');});

    function goSearch(q){ setView('search'); searchInput.value = q; performSearch(q); }
    searchForm.addEventListener('submit', e => { e.preventDefault(); performSearch(searchInput.value.trim()); });

    let searchTimer=null;
    searchInput.addEventListener('input', () => {
      const q = searchInput.value.trim();
      renderLiveSuggestions(q);
      clearTimeout(searchTimer);
      searchTimer = setTimeout(()=>{ if (q.length>=2) performSearch(q); }, 320);
    });

    function renderLiveSuggestions(q) {
      const box = liveSuggestions;
      const wrap = box.querySelector('div') || box.appendChild(document.createElement('div'));
      wrap.className = 'flex gap-2 flex-wrap text-sm';
      if (!q) { box.classList.add('hidden'); wrap.innerHTML=''; return; }
      const suggestions = PRODUCTS.filter(p=>p.name.toLowerCase().includes(q.toLowerCase())).slice(0,6).map(p=>p.name);
      wrap.innerHTML = '';
      suggestions.forEach(s=>{
        const b = document.createElement('button');
        b.className = 'px-2 py-1 rounded bg-white/80 dark:bg-white/5 border border-white/70 dark:border-white/10'; b.textContent = s;
        b.addEventListener('click', ()=>{ searchInput.value=s; performSearch(s); box.classList.add('hidden'); });
        wrap.appendChild(b);
      });
      box.classList.toggle('hidden', suggestions.length===0);
    }

    async function performSearch(q) {
      appState.currentQuery = q;
      searchResults.innerHTML = '';
      searchEmpty.classList.add('hidden'); searchError.classList.add('hidden'); searchLoading.classList.remove('hidden');
      try {
        const items = activeProvider==='api' && apiCfg.baseUrl ? await Providers.api.search(q) : await Providers.mock.search(q);
        searchLoading.classList.add('hidden');
        if (!items.length) { searchEmpty.classList.remove('hidden'); return; }
        items.forEach(p => {
          const best = sortByPrice(p.prices || [])[0];
          const wrap = document.createElement('div');
          wrap.className = 'rounded-2xl p-4 glass border border-white/60 dark:border-white/10 shadow-soft dark:shadow-softDark';
          const retailersListId = 'ret-' + (p.id || p.product_id);
          wrap.innerHTML = `
            <div class="flex gap-3">
              <div class="w-20 h-20 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 flex items-center justify-center shrink-0">${svgProduct(28)}</div>
              <div class="flex-1 min-w-0">
                <p class="font-semibold">${p.name}</p>
                <p class="text-sm text-slate-600 dark:text-slate-400">${p.category||''}</p>
                <div class="mt-2 flex items-center gap-2">
                  <span class="text-sm">Best:</span>
                  <span class="px-2 py-1 rounded-full bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300 text-xs">${best?`${best.retailer} · ${fmtCurrency(best.value)}`:'—'}</span>
                </div>
                <div class="mt-3 flex items-center gap-2">
                  <button data-id="${p.id || p.product_id}" class="btn-details px-3 py-2 rounded-lg bg-gradient-to-r from-primary to-plum text-white focus-ring">View details</button>
                  <button data-target="${retailersListId}" class="btn-compare px-3 py-2 rounded-lg bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 focus-ring">Compare retailers</button>
                </div>
                <div id="${retailersListId}" class="mt-3 hidden">
                  ${renderRetailersInline(p.prices || [])}
                </div>
              </div>
            </div>`;
          searchResults.appendChild(wrap);
        });
        searchResults.querySelectorAll('.btn-details').forEach(btn => btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id'); appState.selectedProductId = id; setView('results'); renderResults(id);
        }));
        searchResults.querySelectorAll('.btn-compare').forEach(btn => btn.addEventListener('click', () => {
          document.getElementById(btn.dataset.target).classList.toggle('hidden');
        }));
      } catch {
        searchLoading.classList.add('hidden'); searchError.classList.remove('hidden');
      }
    }

    function renderRetailersInline(prices) {
      const sorted = sortByPrice(prices);
      return sorted.map((r,i)=>{
        const retailerMeta = retailers.find(x=>x.name===r.retailer);
        const color = retailerMeta?.color || '#64748b';
        return `
          <div class="flex items-center justify-between p-2 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 ${i===0?'ring-1 ring-green-300/70 dark:ring-green-500/30':''}">
            <div class="flex items-center gap-2">
              <span class="w-2.5 h-2.5 rounded-full" style="background:${color}"></span>
              <span class="text-sm">${r.retailer}</span>
            </div>
            <div class="flex items-center gap-2">
              <span class="font-semibold">${fmtCurrency(r.value)}</span>
              ${i===0?'<span class="text-[11px] px-2 py-0.5 rounded-full bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300">Best</span>':''}
              <a href="${r.url||'#'}" target="_blank" rel="noopener noreferrer" class="text-primary text-sm hover:underline">Open</a>
            </div>
          </div>`;
      }).join('');
    }

    // RESULTS
    const productHeader = document.getElementById('productHeader');
    const retailerTable = document.getElementById('retailerTable');
    const trendChart = document.getElementById('trendChart');
    const rangeButtons = Array.from(document.querySelectorAll('.chart-range'));
    rangeButtons.forEach(b => b.addEventListener('click', () => {
      rangeButtons.forEach(x=>x.classList.remove('bg-white/80','dark:bg-white/5','border','border-white/60','dark:border-white/10'));
      b.classList.add('bg-white/80','dark:bg-white/5','border','border-white/60','dark:border-white/10');
      appState.chartRangeDays = parseInt(b.dataset.range, 10);
      if (appState.selectedProductId) renderResults(appState.selectedProductId);
    }));

    async function renderResults(productId, optionalProduct) {
      let p = optionalProduct || PRODUCTS.find(x=>x.id===productId) || lastApiCache.searchIndex[productId] || { id: productId, name: 'Product', category: '', description: '', prices: [] };
      const best = sortByPrice(p.prices || [])[0];
      productHeader.innerHTML = `
        <div class="flex gap-3">
          <div class="w-20 h-20 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 flex items-center justify-center shrink-0">${svgProduct(28)}</div>
          <div class="flex-1 min-w-0">
            <p class="font-semibold text-lg">${p.name}</p>
            <p class="text-sm text-slate-600 dark:text-slate-400">${p.category || ''}</p>
            <p class="text-sm mt-2 text-slate-700 dark:text-slate-300">${p.description || ''}</p>
            <div class="mt-3 flex items-center gap-2">
              <span class="text-sm">Best price now:</span>
              <span class="px-2 py-1 rounded-full bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300 text-[11px]">${best?`${best.retailer} · ${fmtCurrency(best.value)}`:'—'}</span>
              <button id="btnTrack" class="ml-auto px-3 py-2 rounded-lg bg-gradient-to-r from-primary to-plum text-white focus-ring">Track</button>
            </div>
          </div>
        </div>`;

      // Retailers
      retailerTable.innerHTML = '';
      try {
        const prices = activeProvider==='api' && apiCfg.baseUrl ? await Providers.api.compare(productId) : (p.prices || []);
        renderRetailerRows(prices);
      } catch { renderRetailerRows(p.prices || []); }

      function renderRetailerRows(prices) {
        retailerTable.innerHTML = '';
        sortByPrice(prices).forEach((r,i)=>{
          const retailerMeta = retailers.find(x=>x.name===r.retailer);
          const color = retailerMeta?.color || '#64748b';
          const row = document.createElement('div');
          row.className = `flex items-center justify-between p-3 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 ${i===0?'ring-1 ring-green-300/70 dark:ring-green-500/30':''}`;
          row.innerHTML = `
            <div class="flex items-center gap-3">
              <span class="w-3 h-3 rounded-full" style="background:${color}"></span>
              <div>
                <p class="font-semibold">${r.retailer}</p>
                <p class="text-xs text-slate-600 dark:text-slate-400">Updated just now</p>
              </div>
            </div>
            <div class="flex items-center gap-3">
              <span class="font-bold">${fmtCurrency(r.value)}</span>
              ${i===0?'<span class="text-[11px] px-2 py-0.5 rounded-full bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300">Best</span>':''}
              <a href="${r.url||'#'}" target="_blank" rel="noopener noreferrer" class="text-primary text-sm hover:underline">Open</a>
            </div>`;
          retailerTable.appendChild(row);
        });
      }

      // Track
      document.getElementById('btnTrack').addEventListener('click', () => {
        const bestNow = sortByPrice((p.prices||[]))[0]?.value ?? 0;
        const idx = tracked.findIndex(t => t.productId === p.id);
        if (idx === -1) tracked.push({ productId: p.id, lastPrice: bestNow, name: p.name });
        else tracked[idx].lastPrice = bestNow;
        localStorage.setItem('basketna_tracked', JSON.stringify(tracked));
        showToast('Added to tracking');
      });

      // Trend
      let series = [];
      try { series = activeProvider==='api' && apiCfg.baseUrl ? await Providers.api.forecast(productId) : (p.series || []); }
      catch { series = p.series || []; }
      if (!series.length) series = makeSeries(1000, 10000, 180);
      renderTrend(series);
    }

    // TREND CHART
    let lastRenderedSeries = null;
    function renderTrend(seriesFull) {
      lastRenderedSeries = seriesFull;
      const days = appState.chartRangeDays;
      const series = seriesFull.slice(-days);
      const svg = trendChart; svg.innerHTML = '';
      const W=600, H=220, pad=36;
      const min = Math.min(...series.map(s=>s.v));
      const max = Math.max(...series.map(s=>s.v));
      function x(i){ return pad + i * ((W - pad*2)/ (series.length-1 || 1)); }
      function y(v){ const norm = (v - min)/((max-min)||1); return H - pad - norm*(H - pad*2); }
      // Grid
      for (let i=0;i<5;i++){
        const gy = pad + i*((H-pad*2)/4);
        const line = document.createElementNS('http://www.w3.org/2000/svg','line');
        line.setAttribute('x1',pad); line.setAttribute('x2',W-pad);
        line.setAttribute('y1',gy); line.setAttribute('y2',gy);
        line.setAttribute('stroke', root.classList.contains('dark') ? '#223' : '#e5e7eb');
        line.setAttribute('stroke-width','1'); svg.appendChild(line);
      }
      // Gradient
      const defs = document.createElementNS('http://www.w3.org/2000/svg','defs');
      const grad = document.createElementNS('http://www.w3.org/2000/svg','linearGradient');
      grad.setAttribute('id','grad'); grad.setAttribute('x1','0'); grad.setAttribute('y1','0'); grad.setAttribute('x2','0'); grad.setAttribute('y2','1');
      const s1 = document.createElementNS('http://www.w3.org/2000/svg','stop'); s1.setAttribute('offset','0%'); s1.setAttribute('stop-color','#6366F1');
      const s2 = document.createElementNS('http://www.w3.org/2000/svg','stop'); s2.setAttribute('offset','100%'); s2.setAttribute('stop-color','#A78BFA');
      grad.appendChild(s1); grad.appendChild(s2); defs.appendChild(grad); svg.appendChild(defs);
      // Area
      const area = document.createElementNS('http://www.w3.org/2000/svg','path'); let d='';
      series.forEach((s,i)=>{ d += (i===0?`M ${x(i)} ${y(s.v)}`:` L ${x(i)} ${y(s.v)}`); });
      d += ` L ${x(series.length-1)} ${H-pad} L ${x(0)} ${H-pad} Z`;
      area.setAttribute('d', d); area.setAttribute('fill','url(#grad)'); area.setAttribute('opacity','0.35'); svg.appendChild(area);
      // Line
      const line = document.createElementNS('http://www.w3.org/2000/svg','path'); let dl='';
      series.forEach((s,i)=>{ dl += (i===0?`M ${x(i)} ${y(s.v)}`:` L ${x(i)} ${y(s.v)}`); });
      line.setAttribute('d', dl); line.setAttribute('fill','none'); line.setAttribute('stroke','#6366F1'); line.setAttribute('stroke-width','2'); svg.appendChild(line);
      // Last point
      const last = series[series.length-1]; const cx = x(series.length-1), cy = y(last.v);
      const circ = document.createElementNS('http://www.w3.org/2000/svg','circle'); circ.setAttribute('cx',cx); circ.setAttribute('cy',cy); circ.setAttribute('r','4'); circ.setAttribute('fill','#A78BFA'); svg.appendChild(circ);
      // Tag
      const label = fmtCurrency(last.v);
      const tagBg = document.createElementNS('http://www.w3.org/2000/svg','rect');
      const tagText = document.createElementNS('http://www.w3.org/2000/svg','text');
      const approx = Math.max(44, label.length*7);
      tagBg.setAttribute('x', cx+6); tagBg.setAttribute('y', cy-24);
      tagBg.setAttribute('width', approx); tagBg.setAttribute('height','18'); tagBg.setAttribute('rx','6');
      tagBg.setAttribute('fill', root.classList.contains('dark') ? '#0b1020' : '#ffffff'); tagBg.setAttribute('stroke','#6366F1');
      tagText.textContent = label; tagText.setAttribute('x', cx+10); tagText.setAttribute('y', cy-10); tagText.setAttribute('fill', root.classList.contains('dark') ? '#cbd5e1' : '#334155'); tagText.setAttribute('font-size','12');
      svg.appendChild(tagBg); svg.appendChild(tagText);
    }

    // DASHBOARD
    const notifToggle = document.getElementById('notifToggle');
    const trackedList = document.getElementById('trackedList');
    const trackedEmpty = document.getElementById('trackedEmpty');
    const clearTracked = document.getElementById('clearTracked');
    const alertsList = document.getElementById('alertsList');
    const alertsEmpty = document.getElementById('alertsEmpty');
    const currencySelect = document.getElementById('currencySelect');
    currencySelect.value = 'INR';

    notifToggle.classList.toggle('knob-on', notifEnabledLS);
    notifToggle.addEventListener('click', () => {
      const on = !notifToggle.classList.contains('knob-on');
      notifToggle.classList.toggle('knob-on', on);
      localStorage.setItem('basketna_notif', JSON.stringify(on));
      showToast(on ? 'Alerts enabled' : 'Alerts disabled');
    });
    clearTracked.addEventListener('click', () => {
      tracked.splice(0, tracked.length);
      localStorage.setItem('basketna_tracked', JSON.stringify(tracked));
      renderDashboard();
    });

    function renderDashboard() {
      trackedList.innerHTML = '';
      if (!tracked.length) {
        trackedEmpty.classList.remove('hidden');
      } else {
        trackedEmpty.classList.add('hidden');
        tracked.forEach(t => {
          const p = PRODUCTS.find(x=>x.id===t.productId) || lastApiCache.searchIndex[t.productId] || { name: t.name || 'Product', category: '' };
          const best = sortByPrice(p.prices || [])[0] || { value: t.lastPrice };
          const change = (best.value || 0) - (t.lastPrice || 0);
          const row = document.createElement('div');
          row.className = 'flex items-center gap-3 p-3 rounded-xl bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10';
          row.innerHTML = `
            <div class="w-12 h-12 rounded-lg bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 flex items-center justify-center shrink-0">${svgProduct(20)}</div>
            <div class="flex-1 min-w-0">
              <p class="font-semibold truncate">${p.name}</p>
              <p class="text-xs text-slate-600 dark:text-slate-400">${p.category||''}</p>
            </div>
            <div class="text-right">
              <p class="font-semibold">${fmtCurrency(best.value || 0)}</p>
              <p class="text-[11px] ${change<0?'text-green-600 dark:text-green-400':change>0?'text-red-600 dark:text-red-400':'text-slate-500 dark:text-slate-400'}">${change===0?'-':(change<0?'▼':'▲')} ${fmtCurrency(Math.abs(change))}</p>
            </div>
            <div class="flex items-center gap-2">
              <button data-id="${t.productId}" class="btn-open px-2.5 py-1.5 rounded bg-white/80 dark:bg-white/5 border border-white/60 dark:border-white/10 text-sm">Open</button>
              <button data-id="${t.productId}" class="btn-untrack px-2.5 py-1.5 rounded bg-red-50 dark:bg-red-500/10 text-red-700 dark:text-red-300 text-sm">Remove</button>
            </div>`;
          trackedList.appendChild(row);
        });
        trackedList.querySelectorAll('.btn-open').forEach(b => b.addEventListener('click', () => { appState.selectedProductId = b.dataset.id; setView('results'); renderResults(b.dataset.id); }));
        trackedList.querySelectorAll('.btn-untrack').forEach(b => b.addEventListener('click', () => {
          const idx = tracked.findIndex(x=>x.productId===b.dataset.id);
          if (idx>=0) tracked.splice(idx,1);
          localStorage.setItem('basketna_tracked', JSON.stringify(tracked));
          renderDashboard();
        }));
      }

      // Alerts
      alertsList.innerHTML = '';
      if (!tracked.length) {
        alertsEmpty.classList.remove('hidden');
      } else {
        alertsEmpty.classList.add('hidden');
        tracked.forEach(t => {
          const p = PRODUCTS.find(x=>x.id===t.productId);
          if (!p) return;
          const best = sortByPrice(p.prices || [])[0];
          if (!best) return;
          const change = best.value - t.lastPrice;
          if (change < 0) {
            const box = document.createElement('div');
            box.className = 'p-2 rounded-xl bg-green-50 dark:bg-green-500/10 border border-green-200/60 dark:border-green-500/20 text-sm';
            box.textContent = `${p.name} dropped by ${fmtCurrency(Math.abs(change))} → Now ${fmtCurrency(best.value)} at ${best.retailer}`;
            alertsList.appendChild(box);
          }
        });
        if (!alertsList.children.length) alertsEmpty.classList.remove('hidden');
      }

      renderBestDealChart(); renderMultiStoreChart();
    }

    // MINI CHARTS
    function renderBestDealChart() {
      const svg = document.getElementById('bestDealChart'); svg.innerHTML = '';
      const W=300,H=120,pad=20;
      const sample = shuffle(PRODUCTS).slice(0,3).map(p => ({ name: p.name.split(' ')[0], score: Math.random()*100+100 }));
      const max = Math.max(...sample.map(s=>s.score));
      sample.forEach((s,i)=>{
        const x = pad + i*((W-pad*2)/3) + 15; const h = (s.score/max)*(H-pad*2); const y = H - pad - h;
        const rect = document.createElementNS('http://www.w3.org/2000/svg','rect');
        rect.setAttribute('x',x); rect.setAttribute('y',y); rect.setAttribute('width',40); rect.setAttribute('height',h); rect.setAttribute('rx','6');
        rect.setAttribute('fill', i===0?'#6366F1':(i===1?'#22D3EE':'#A78BFA')); svg.appendChild(rect);
        const tx = document.createElementNS('http://www.w3.org/2000/svg','text'); tx.setAttribute('x',x+20); tx.setAttribute('y',H-4); tx.setAttribute('text-anchor','middle'); tx.setAttribute('font-size','10');
        tx.setAttribute('fill', root.classList.contains('dark') ? '#cbd5e1' : '#334155'); tx.textContent = s.name; svg.appendChild(tx);
      });
    }
    function renderMultiStoreChart() {
      const svg = document.getElementById('multiStoreChart'); svg.innerHTML = '';
      const W=300,H=120,pad=20; const stores = retailers.slice(0,4); const values = stores.map(()=>Math.random()*100+50); const max = Math.max(...values);
      stores.forEach((st,i)=>{
        const x = pad + i*((W-pad*2)/4) + 10; const h = (values[i]/max)*(H-pad*2); const y = H - pad - h;
        const rect = document.createElementNS('http://www.w3.org/2000/svg','rect'); rect.setAttribute('x',x); rect.setAttribute('y',y); rect.setAttribute('width',30); rect.setAttribute('height',h); rect.setAttribute('rx','6'); rect.setAttribute('fill', st.color); svg.appendChild(rect);
        const tx = document.createElementNS('http://www.w3.org/2000/svg','text'); tx.setAttribute('x',x+15); tx.setAttribute('y',H-4); tx.setAttribute('text-anchor','middle'); tx.setAttribute('font-size','10'); tx.setAttribute('fill', root.classList.contains('dark') ? '#cbd5e1' : '#334155'); tx.textContent = st.name.split(' ')[0]; svg.appendChild(tx);
      });
    }

    // INIT
    function init() {
      updateModeBadges();
      rangeButtons[0].classList.add('bg-white/80','dark:bg-white/5','border','border-white/60','dark:border-white/10');
      appState.selectedProductId = PRODUCTS[0].id;
      renderResults(PRODUCTS[0].id);
      renderRecs();
      setView('home');
    }
    init();

    // Keyboard quick search
    document.addEventListener('keydown', (e) => {
      if (e.key === '/' && document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
        setView('search'); setTimeout(()=>searchInput.focus(), 0); e.preventDefault();
      }
    });
  </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98398ab1c74093d3',t:'MTc1ODYyNTI2Mi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
